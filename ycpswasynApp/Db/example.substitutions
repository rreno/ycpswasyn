#=========================================================================================================
# Example substitution file showing how to manually load records.                
# P,R: The PV name as $(P):$(R)
# DESC, PINI, SCAN, NELM, etc.: The same fields on the records
# PORT: The asyn port name. It must match the port name given when calling "YCPSWASYNConfig" on st.cmd 
# PARAM: The asyn paramter name. It must be defined in the dictionary file and assigned to a register 
#=========================================================================================================

#======================================
# Registers with ScalVal_RO interfaces
#======================================
# Single register
file "db/RegisterIn.template" { pattern
{ P,        R,              DESC,                           PINI,   SCAN,       PORT,   PARAM       }
{ yamlIOC1, DeviceDna,      "Xilinx Device DNA",            "YES",  "Passive",  Atca2,  DEVICE_DNA  }
{ yamlIOC1, FpgaVersion,    "FPGA Firmware Version Number"  "YES",  "Passive",  Atca2,  FPGA_VERS   }
{ yamlIOC1, UpTimeCnt,      "Seconds since last reset"      "YES",  "1 second", Atca2,  UP_TIME_CNT }
}

# Array of register
file "db/RegisterArrayIn.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,   PARAM       }
}

# Array of 8-bit register as a string 
file "db/RegisterArrayChar.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,   PARAM       }
{ yamlIOC1, BuildStamp,     "Firmware Build String",        64,     "YES",  "Passive",  Atca2,  BUILD_STAMP }   
}

#======================================
# Register with ScalVal interfaces
#======================================

file "db/RegisterOut.template" { pattern
{ P,        R,              DESC,                           PINI,   SCAN,       PORT,   PARAM       }
{ yamlIOC1, ScratchPad,     "Register to test R/W"          "NO",   "Passive",  Atca2,  SCRATCH_PAD }
}

#======================================
# Register with DoubleVal_RO interfaces
#======================================

file "db/RegisterDoubleIn.template" { pattern
{ P,        R,              DESC,                           PINI,   SCAN,       PORT,   EGU,    PARAM   }
}

#======================================
# Register with DoubleVal interfaces
#======================================

file "db/RegisterDoubleOut.template" { pattern
{ P,        R,              DESC,                           PINI,   SCAN,       PORT,   EGU,    PARAM   }
}

#======================================
# Register with Command interfaces
#======================================
file "db/RegisteCommand.template" { pattern
{ P,        R,              DESC,                           PINI,   SCAN,       PORT,   PARAM       }
}


#======================================
# Register with Stream interfaces
#======================================

file "db/RegisterStream.template" {pattern
{ P,            R,          DESC,               NELM,       PORT,   PARAM       }
{ yamlIOC1,     Stream0,    "Stream channel 0", 5000000,    Atca2,  STREAM_CH0  }
}
